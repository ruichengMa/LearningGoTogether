package main

import (
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"github.com/jmoiron/sqlx"
)

type Person struct {
	UserId   int    `db:"user_id"`
	Username string `db:"username"`
	Sex      string `db:"sex"`
	Email    string `db:"email"`
}

type Place struct {
	Country string `db:"country"`
	City    string `db:"city"`
	TelCode int    `db:"telcode"`
}

var Db *sqlx.DB

func init() {
	//新建test数据库，person、place 表
	//CREATE TABLE `person` (
	//	`user_id` int(11) NOT NULL AUTO_INCREMENT,
	//	`username` varchar(260) DEFAULT NULL,
	//	`sex` varchar(260) DEFAULT NULL,
	//	`email` varchar(260) DEFAULT NULL,
	//	PRIMARY KEY (`user_id`)
	//) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
	//
	//CREATE TABLE place (
	//	country varchar(200),
	//	city varchar(200),
	//	telcode int
	//)ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

	database, err := sqlx.Open("mysql", "root:123456@tcp(127.0.0.1:3306)/test")
	if err != nil {
		fmt.Println("open mysql failed,", err)
		return
	}
	Db = database
}

func main() {
	insert()
	selectFuc()
	update()
	deleteFuc()
	transaction()
}

// 插入
func insert()  {
	r, err := Db.Exec("insert into person(username, sex, email)values(?, ?, ?)", "stu001", "man", "stu01@qq.com")
	if err != nil {
		fmt.Println("exec failed, ", err)
		return
	}
	id, err := r.LastInsertId()
	if err != nil {
		fmt.Println("exec failed, ", err)
		return
	}

	fmt.Println("insert succ:", id)
}

// 查询
func selectFuc() {
	var person []Person
	err := Db.Select(&person, "select user_id, username, sex, email from person where user_id=?", 2)
	if err != nil {
		fmt.Println("exec failed, ", err)
		return
	}
	fmt.Println("select succ:", person)
}

// 修改
func update()  {
	res, err := Db.Exec("update person set username=? where user_id=?", "stu0003", 2)
	if err != nil {
		fmt.Println("exec failed, ", err)
		return
	}
	row, err := res.RowsAffected()
	if err != nil {
		fmt.Println("rows failed, ",err)
	}
	fmt.Println("update succ:",row)
}

// 删除
func deleteFuc() {
	res, err := Db.Exec("delete from person where user_id=?", 1)
	if err != nil {
		fmt.Println("exec failed, ", err)
		return
	}

	row, err := res.RowsAffected()
	if err != nil {
		fmt.Println("rows failed, ", err)
	}

	fmt.Println("delete succ: ", row)
}

// 事务
func transaction() {
	//mysql事务特性：
	//1) 原子性
	//2) 一致性
	//3) 隔离性
	//4) 持久性

	//golang MySQL事务应用：
	//1） import (“github.com/jmoiron/sqlx")
	//2)  Db.Begin()		开始事务
	//3)  Db.Submit()		提交事务
	//4)  Db.Rollback() 	回滚事务

	conn, err := Db.Begin()
	if err != nil {
		fmt.Println("begin failed :", err)
		return
	}

	r, err := conn.Exec("insert into person(username, sex, email)values(?, ?, ?)", "stu001", "man", "stu01@qq.com")
	if err != nil {
		fmt.Println("exec failed, ", err)
		conn.Rollback()
		return
	}
	id, err := r.LastInsertId()
	if err != nil {
		fmt.Println("exec failed, ", err)
		conn.Rollback()
		return
	}
	fmt.Println("insert succ:", id)

	r, err = conn.Exec("insert into person(username, sex, email)values(?, ?, ?)", "stu001", "man", "stu01@qq.com")
	if err != nil {
		fmt.Println("exec failed, ", err)
		conn.Rollback()
		return
	}
	id, err = r.LastInsertId()
	if err != nil {
		fmt.Println("exec failed, ", err)
		conn.Rollback()
		return
	}
	fmt.Println("insert succ:", id)

	conn.Commit()
}